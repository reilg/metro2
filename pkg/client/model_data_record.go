/*
METRO2 API

Moov Metro2 ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing and validating Metro2 files. Metro2 is an open-source consumer credit history report for credit report file creation and validation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// DataRecord struct for DataRecord
type DataRecord struct {
	Base BaseSegment `json:"base"`
	J1 []J1Segment `json:"j1,omitempty"`
	J2 []J2Segment `json:"j2,omitempty"`
	K1 *K1Segment `json:"k1,omitempty"`
	K2 *K2Segment `json:"k2,omitempty"`
	K3 *K3Segment `json:"k3,omitempty"`
	K4 *K4Segment `json:"k4,omitempty"`
	L1 *L1Segment `json:"l1,omitempty"`
	N1 *N1Segment `json:"n1,omitempty"`
}

// NewDataRecord instantiates a new DataRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataRecord(base BaseSegment) *DataRecord {
	this := DataRecord{}
	this.Base = base
	return &this
}

// NewDataRecordWithDefaults instantiates a new DataRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataRecordWithDefaults() *DataRecord {
	this := DataRecord{}
	return &this
}

// GetBase returns the Base field value
func (o *DataRecord) GetBase() BaseSegment {
	if o == nil {
		var ret BaseSegment
		return ret
	}

	return o.Base
}

// GetBaseOk returns a tuple with the Base field value
// and a boolean to check if the value has been set.
func (o *DataRecord) GetBaseOk() (*BaseSegment, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Base, true
}

// SetBase sets field value
func (o *DataRecord) SetBase(v BaseSegment) {
	o.Base = v
}

// GetJ1 returns the J1 field value if set, zero value otherwise.
func (o *DataRecord) GetJ1() []J1Segment {
	if o == nil || o.J1 == nil {
		var ret []J1Segment
		return ret
	}
	return o.J1
}

// GetJ1Ok returns a tuple with the J1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRecord) GetJ1Ok() ([]J1Segment, bool) {
	if o == nil || o.J1 == nil {
		return nil, false
	}
	return o.J1, true
}

// HasJ1 returns a boolean if a field has been set.
func (o *DataRecord) HasJ1() bool {
	if o != nil && o.J1 != nil {
		return true
	}

	return false
}

// SetJ1 gets a reference to the given []J1Segment and assigns it to the J1 field.
func (o *DataRecord) SetJ1(v []J1Segment) {
	o.J1 = v
}

// GetJ2 returns the J2 field value if set, zero value otherwise.
func (o *DataRecord) GetJ2() []J2Segment {
	if o == nil || o.J2 == nil {
		var ret []J2Segment
		return ret
	}
	return o.J2
}

// GetJ2Ok returns a tuple with the J2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRecord) GetJ2Ok() ([]J2Segment, bool) {
	if o == nil || o.J2 == nil {
		return nil, false
	}
	return o.J2, true
}

// HasJ2 returns a boolean if a field has been set.
func (o *DataRecord) HasJ2() bool {
	if o != nil && o.J2 != nil {
		return true
	}

	return false
}

// SetJ2 gets a reference to the given []J2Segment and assigns it to the J2 field.
func (o *DataRecord) SetJ2(v []J2Segment) {
	o.J2 = v
}

// GetK1 returns the K1 field value if set, zero value otherwise.
func (o *DataRecord) GetK1() K1Segment {
	if o == nil || o.K1 == nil {
		var ret K1Segment
		return ret
	}
	return *o.K1
}

// GetK1Ok returns a tuple with the K1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRecord) GetK1Ok() (*K1Segment, bool) {
	if o == nil || o.K1 == nil {
		return nil, false
	}
	return o.K1, true
}

// HasK1 returns a boolean if a field has been set.
func (o *DataRecord) HasK1() bool {
	if o != nil && o.K1 != nil {
		return true
	}

	return false
}

// SetK1 gets a reference to the given K1Segment and assigns it to the K1 field.
func (o *DataRecord) SetK1(v K1Segment) {
	o.K1 = &v
}

// GetK2 returns the K2 field value if set, zero value otherwise.
func (o *DataRecord) GetK2() K2Segment {
	if o == nil || o.K2 == nil {
		var ret K2Segment
		return ret
	}
	return *o.K2
}

// GetK2Ok returns a tuple with the K2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRecord) GetK2Ok() (*K2Segment, bool) {
	if o == nil || o.K2 == nil {
		return nil, false
	}
	return o.K2, true
}

// HasK2 returns a boolean if a field has been set.
func (o *DataRecord) HasK2() bool {
	if o != nil && o.K2 != nil {
		return true
	}

	return false
}

// SetK2 gets a reference to the given K2Segment and assigns it to the K2 field.
func (o *DataRecord) SetK2(v K2Segment) {
	o.K2 = &v
}

// GetK3 returns the K3 field value if set, zero value otherwise.
func (o *DataRecord) GetK3() K3Segment {
	if o == nil || o.K3 == nil {
		var ret K3Segment
		return ret
	}
	return *o.K3
}

// GetK3Ok returns a tuple with the K3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRecord) GetK3Ok() (*K3Segment, bool) {
	if o == nil || o.K3 == nil {
		return nil, false
	}
	return o.K3, true
}

// HasK3 returns a boolean if a field has been set.
func (o *DataRecord) HasK3() bool {
	if o != nil && o.K3 != nil {
		return true
	}

	return false
}

// SetK3 gets a reference to the given K3Segment and assigns it to the K3 field.
func (o *DataRecord) SetK3(v K3Segment) {
	o.K3 = &v
}

// GetK4 returns the K4 field value if set, zero value otherwise.
func (o *DataRecord) GetK4() K4Segment {
	if o == nil || o.K4 == nil {
		var ret K4Segment
		return ret
	}
	return *o.K4
}

// GetK4Ok returns a tuple with the K4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRecord) GetK4Ok() (*K4Segment, bool) {
	if o == nil || o.K4 == nil {
		return nil, false
	}
	return o.K4, true
}

// HasK4 returns a boolean if a field has been set.
func (o *DataRecord) HasK4() bool {
	if o != nil && o.K4 != nil {
		return true
	}

	return false
}

// SetK4 gets a reference to the given K4Segment and assigns it to the K4 field.
func (o *DataRecord) SetK4(v K4Segment) {
	o.K4 = &v
}

// GetL1 returns the L1 field value if set, zero value otherwise.
func (o *DataRecord) GetL1() L1Segment {
	if o == nil || o.L1 == nil {
		var ret L1Segment
		return ret
	}
	return *o.L1
}

// GetL1Ok returns a tuple with the L1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRecord) GetL1Ok() (*L1Segment, bool) {
	if o == nil || o.L1 == nil {
		return nil, false
	}
	return o.L1, true
}

// HasL1 returns a boolean if a field has been set.
func (o *DataRecord) HasL1() bool {
	if o != nil && o.L1 != nil {
		return true
	}

	return false
}

// SetL1 gets a reference to the given L1Segment and assigns it to the L1 field.
func (o *DataRecord) SetL1(v L1Segment) {
	o.L1 = &v
}

// GetN1 returns the N1 field value if set, zero value otherwise.
func (o *DataRecord) GetN1() N1Segment {
	if o == nil || o.N1 == nil {
		var ret N1Segment
		return ret
	}
	return *o.N1
}

// GetN1Ok returns a tuple with the N1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRecord) GetN1Ok() (*N1Segment, bool) {
	if o == nil || o.N1 == nil {
		return nil, false
	}
	return o.N1, true
}

// HasN1 returns a boolean if a field has been set.
func (o *DataRecord) HasN1() bool {
	if o != nil && o.N1 != nil {
		return true
	}

	return false
}

// SetN1 gets a reference to the given N1Segment and assigns it to the N1 field.
func (o *DataRecord) SetN1(v N1Segment) {
	o.N1 = &v
}

func (o DataRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["base"] = o.Base
	}
	if o.J1 != nil {
		toSerialize["j1"] = o.J1
	}
	if o.J2 != nil {
		toSerialize["j2"] = o.J2
	}
	if o.K1 != nil {
		toSerialize["k1"] = o.K1
	}
	if o.K2 != nil {
		toSerialize["k2"] = o.K2
	}
	if o.K3 != nil {
		toSerialize["k3"] = o.K3
	}
	if o.K4 != nil {
		toSerialize["k4"] = o.K4
	}
	if o.L1 != nil {
		toSerialize["l1"] = o.L1
	}
	if o.N1 != nil {
		toSerialize["n1"] = o.N1
	}
	return json.Marshal(toSerialize)
}

type NullableDataRecord struct {
	value *DataRecord
	isSet bool
}

func (v NullableDataRecord) Get() *DataRecord {
	return v.value
}

func (v *NullableDataRecord) Set(val *DataRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableDataRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableDataRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataRecord(val *DataRecord) *NullableDataRecord {
	return &NullableDataRecord{value: val, isSet: true}
}

func (v NullableDataRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


